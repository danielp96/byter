// Generated by Haxe 4.2.2
#include <hxcpp.h>

#ifndef INCLUDED_Byter
#include <Byter.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_18_main,"Byter","main",0xf39522dd,"Byter.main","Byter.hx",18,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_147_argProcess,"Byter","argProcess",0x7daa605d,"Byter.argProcess","Byter.hx",147,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_178_opcode,"Byter","opcode",0x490c9272,"Byter.opcode","Byter.hx",178,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_230_numFormat,"Byter","numFormat",0x9787dcf9,"Byter.numFormat","Byter.hx",230,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_246_bin2hex,"Byter","bin2hex",0xe5f66a0c,"Byter.bin2hex","Byter.hx",246,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_263_removeComment,"Byter","removeComment",0x98737757,"Byter.removeComment","Byter.hx",263,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_277_error,"Byter","error",0x9ef830a4,"Byter.error","Byter.hx",277,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_10_boot,"Byter","boot",0xec5a6ed6,"Byter.boot","Byter.hx",10,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_12_boot,"Byter","boot",0xec5a6ed6,"Byter.boot","Byter.hx",12,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_13_boot,"Byter","boot",0xec5a6ed6,"Byter.boot","Byter.hx",13,0x3b0294b4)
HX_LOCAL_STACK_FRAME(_hx_pos_f931cc00077cde40_15_boot,"Byter","boot",0xec5a6ed6,"Byter.boot","Byter.hx",15,0x3b0294b4)

void Byter_obj::__construct() { }

Dynamic Byter_obj::__CreateEmpty() { return new Byter_obj; }

void *Byter_obj::_hx_vtable = 0;

Dynamic Byter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Byter_obj > _hx_result = new Byter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Byter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4509e1a6;
}

bool Byter_obj::bin;

::String Byter_obj::inPath;

::String Byter_obj::outPath;

int Byter_obj::exitCode;

void Byter_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_f931cc00077cde40_18_main)
HXLINE(  19)		::Byter_obj::argProcess();
HXLINE(  21)		int binLineCount = 0;
HXLINE(  23)		::Array< ::String > lines = ::sys::io::File_obj::getContent(::Byter_obj::inPath).split(HX_("\n",0a,00,00,00));
HXLINE(  25)		 ::haxe::ds::StringMap labels =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  27)		 ::haxe::ds::StringMap variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  29)		 ::sys::io::FileOutput outFile = ::sys::io::File_obj::write(::Byter_obj::outPath,::Byter_obj::bin);
HXLINE(  30)		outFile->set_bigEndian(true);
HXLINE(  32)		{
HXLINE(  32)			int _g = 0;
HXDLIN(  32)			int _g1 = lines->length;
HXDLIN(  32)			while((_g < _g1)){
HXLINE(  32)				_g = (_g + 1);
HXDLIN(  32)				int i = (_g - 1);
HXLINE(  34)				lines[i] = ::Byter_obj::removeComment(::StringTools_obj::trim(lines->__get(i)));
HXLINE(  36)				if ((lines->__get(i) == HX_("",00,00,00,00))) {
HXLINE(  36)					continue;
            				}
HXLINE(  39)				if ((lines->__get(i).charAt(0) == HX_(":",3a,00,00,00))) {
HXLINE(  41)					::String label = lines->__get(i).substring(1,null());
HXLINE(  43)					if (labels->exists(label)) {
HXLINE(  45)						::Byter_obj::error((HX_("Duplicate label: ",e5,cd,8d,83) + label),(i + 1));
            					}
HXLINE(  48)					labels->set(label,binLineCount);
HXLINE(  50)					lines[i] = HX_("",00,00,00,00);
HXLINE(  51)					continue;
            				}
HXLINE(  55)				if ((lines->__get(i).indexOf(HX_(":",3a,00,00,00),null()) != -1)) {
HXLINE(  57)					int label = (lines->__get(i).indexOf(HX_(":",3a,00,00,00),null()) + 1);
HXDLIN(  57)					::String label1 = lines->__get(i).substring(label,null());
HXLINE(  59)					if (labels->exists(label1)) {
HXLINE(  61)						::String lines1 = lines->__get(i);
HXDLIN(  61)						lines[i] = ::StringTools_obj::replace(lines1,(HX_(":",3a,00,00,00) + label1),(HX_("0x",48,2a,00,00) + ::StringTools_obj::hex(( (int)(labels->get(label1)) ),3)));
            					}
            					else {
HXLINE(  65)						::Byter_obj::error((HX_("Undeclared label: ",ed,58,db,66) + label1),(i + 1));
            					}
            				}
HXLINE(  70)				if ((lines->__get(i).charAt(0) == HX_("@",40,00,00,00))) {
HXLINE(  72)					int variable = lines->__get(i).lastIndexOf(HX_(" ",20,00,00,00),null());
HXDLIN(  72)					::String variable1 = lines->__get(i).substring(1,variable);
HXLINE(  74)					if (variables->exists(variable1)) {
HXLINE(  76)						::Byter_obj::error((HX_("Duplicate variable: ",77,24,b7,1b) + variable1),(i + 1));
            					}
HXLINE(  79)					{
HXLINE(  79)						int v = (lines->__get(i).lastIndexOf(HX_(" ",20,00,00,00),null()) + 1);
HXDLIN(  79)						int v1 = ( (int)(::Std_obj::parseInt(lines->__get(i).substring(v,null()))) );
HXDLIN(  79)						variables->set(variable1,v1);
            					}
HXLINE(  81)					lines[i] = HX_("",00,00,00,00);
HXLINE(  82)					continue;
            				}
HXLINE(  85)				if ((lines->__get(i).indexOf(HX_("@",40,00,00,00),null()) != -1)) {
HXLINE(  87)					int variable = (lines->__get(i).indexOf(HX_("@",40,00,00,00),null()) + 1);
HXDLIN(  87)					::String variable1 = lines->__get(i).substring(variable,null());
HXLINE(  89)					if (variables->exists(variable1)) {
HXLINE(  91)						::String lines1 = lines->__get(i);
HXDLIN(  91)						lines[i] = ::StringTools_obj::replace(lines1,(HX_("@",40,00,00,00) + variable1),(HX_("0x",48,2a,00,00) + ::StringTools_obj::hex(( (int)(variables->get(variable1)) ),3)));
            					}
            					else {
HXLINE(  95)						::Byter_obj::error((HX_("Undeclared variable: ",6f,2e,7c,6c) + variable1),(i + 1));
            					}
            				}
HXLINE( 101)				while((lines->__get(i).indexOf(HX_("$",24,00,00,00),null()) != -1)){
HXLINE( 103)					int _g = (lines->__get(i).indexOf(HX_("$",24,00,00,00),null()) + 1);
HXDLIN( 103)					::String _hx_tmp;
HXDLIN( 103)					::String _hx_switch_0 = lines->__get(i).charAt(_g);
            					if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("2",32,00,00,00)) ||  (_hx_switch_0==HX_("3",33,00,00,00)) ||  (_hx_switch_0==HX_("4",34,00,00,00)) ||  (_hx_switch_0==HX_("5",35,00,00,00)) ||  (_hx_switch_0==HX_("6",36,00,00,00)) ||  (_hx_switch_0==HX_("7",37,00,00,00)) ||  (_hx_switch_0==HX_("8",38,00,00,00)) ||  (_hx_switch_0==HX_("9",39,00,00,00)) ||  (_hx_switch_0==HX_("A",41,00,00,00)) ||  (_hx_switch_0==HX_("B",42,00,00,00)) ||  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("E",45,00,00,00)) ||  (_hx_switch_0==HX_("F",46,00,00,00)) ){
HXLINE( 103)						_hx_tmp = ::StringTools_obj::replace(lines->__get(i),HX_("$",24,00,00,00),HX_("0x",48,2a,00,00));
HXDLIN( 103)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("L",4c,00,00,00)) ){
HXLINE( 103)						_hx_tmp = ::StringTools_obj::replace(lines->__get(i),HX_("$L",a8,1f,00,00),HX_("0xE",fd,d4,24,00));
HXDLIN( 103)						goto _hx_goto_2;
            					}
            					if (  (_hx_switch_0==HX_("M",4d,00,00,00)) ){
HXLINE( 103)						_hx_tmp = ::StringTools_obj::replace(lines->__get(i),HX_("$M",a9,1f,00,00),HX_("0xF",fe,d4,24,00));
HXDLIN( 103)						goto _hx_goto_2;
            					}
            					/* default */{
HXLINE( 111)						::Byter_obj::error(HX_("Unkown register.",ff,86,f3,77),(i + 1));
HXLINE( 103)						_hx_tmp = HX_("",00,00,00,00);
            					}
            					_hx_goto_2:;
HXDLIN( 103)					lines[i] = _hx_tmp;
            				}
HXLINE( 116)				lines[i] = ::Byter_obj::opcode(lines->__get(i));
HXLINE( 119)				if ((lines->__get(i) == HX_("e",65,00,00,00))) {
HXLINE( 121)					::Byter_obj::error(HX_("Invalid Instruction.",69,55,60,93),(i + 1));
            				}
HXLINE( 124)				binLineCount = (binLineCount + 1);
            			}
            		}
HXLINE( 127)		{
HXLINE( 127)			int _g2_current = 0;
HXDLIN( 127)			::Array< ::String > _g2_array = lines;
HXDLIN( 127)			while((_g2_current < _g2_array->length)){
HXLINE( 127)				_g2_current = (_g2_current + 1);
HXDLIN( 127)				::String line = _g2_array->__get((_g2_current - 1));
HXLINE( 130)				if ((line == HX_("",00,00,00,00))) {
HXLINE( 130)					continue;
            				}
HXLINE( 132)				if (::Byter_obj::bin) {
HXLINE( 134)					outFile->writeUInt16(( (int)(::Std_obj::parseInt((HX_("0x",48,2a,00,00) + line))) ));
            				}
            				else {
HXLINE( 138)					outFile->writeString((line + HX_("\n",0a,00,00,00)),null());
            				}
            			}
            		}
HXLINE( 142)		outFile->close();
HXLINE( 143)		::Sys_obj::exit(::Byter_obj::exitCode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Byter_obj,main,(void))

void Byter_obj::argProcess(){
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_147_argProcess)
HXLINE( 148)		::Array< ::String > args = ::Sys_obj::args();
HXLINE( 150)		bool _hx_tmp;
HXDLIN( 150)		bool _hx_tmp1;
HXDLIN( 150)		if ((args->length != 0)) {
HXLINE( 150)			_hx_tmp1 = (args->__get(0) == HX_("--help",21,8a,22,2c));
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = true;
            		}
HXDLIN( 150)		if (!(_hx_tmp1)) {
HXLINE( 150)			_hx_tmp = (args->__get(0) == HX_("-h",9b,27,00,00));
            		}
            		else {
HXLINE( 150)			_hx_tmp = true;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 152)			::Sys_obj::println(HX_("Usage:",19,94,d6,73));
HXLINE( 153)			::Sys_obj::println(HX_("    byter input output [FORMAT]",fe,26,19,af));
HXLINE( 154)			::Sys_obj::println(HX_("\n    -b\t\toutput binary data",89,33,ce,03));
HXLINE( 155)			::Sys_obj::println(HX_("    -h\t\toutput hexadecimal txt",57,49,2d,53));
HXLINE( 157)			::Sys_obj::println(HX_("\nIf FORMAT not specified defaults to binary.",09,31,77,62));
HXLINE( 159)			::Sys_obj::exit(0);
            		}
HXLINE( 162)		::Byter_obj::inPath = args->__get(0);
HXLINE( 163)		::Byter_obj::outPath = args->__get(1);
HXLINE( 165)		if ((args->length == 3)) {
HXLINE( 167)			bool _hx_tmp;
HXDLIN( 167)			::String _hx_switch_0 = args->__get(2);
            			if (  (_hx_switch_0==HX_("-b",95,27,00,00)) ){
HXLINE( 167)				_hx_tmp = true;
HXDLIN( 167)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==HX_("-h",9b,27,00,00)) ){
HXLINE( 167)				_hx_tmp = false;
HXDLIN( 167)				goto _hx_goto_5;
            			}
            			/* default */{
HXLINE( 167)				_hx_tmp = true;
            			}
            			_hx_goto_5:;
HXDLIN( 167)			::Byter_obj::bin = _hx_tmp;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Byter_obj,argProcess,(void))

::String Byter_obj::opcode(::String instruction){
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_178_opcode)
HXLINE( 179)		::Array< ::String > instr = instruction.split(HX_(" ",20,00,00,00));
HXLINE( 181)		::String _hx_switch_0 = instr->__get(0);
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE( 223)			return HX_("",00,00,00,00);
HXDLIN( 223)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("ADD",01,8e,31,00)) ){
HXLINE( 188)			::String _hx_tmp = (HX_("05",05,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 188)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 188)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("AND",b7,96,31,00)) ){
HXLINE( 184)			::String _hx_tmp = (HX_("01",01,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 184)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 184)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("CALL",9e,e0,7a,2c)) ){
HXLINE( 214)			return (HX_("2",32,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 214)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("CLRB",99,3e,83,2c)) ){
HXLINE( 207)			::String _hx_tmp = (HX_("16",e5,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 207)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 207)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("CMP",66,1a,33,00)) ){
HXLINE( 202)			::String _hx_tmp = (HX_("11",e0,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 202)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 202)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("CSL",9c,1f,33,00)) ){
HXLINE( 198)			::String _hx_tmp = (HX_("0D",14,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 198)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 198)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("CSR",a2,1f,33,00)) ){
HXLINE( 199)			::String _hx_tmp = (HX_("0E",15,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 199)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 199)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("DEC",a2,d5,33,00)) ){
HXLINE( 204)			::String _hx_tmp = (HX_("13",e2,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 204)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 204)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("IN",e5,3f,00,00)) ){
HXLINE( 200)			::String _hx_tmp = (HX_("0F",16,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 200)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 200)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("INC",be,a8,37,00)) ){
HXLINE( 203)			::String _hx_tmp = (HX_("12",e1,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 203)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 203)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("JC",b9,40,00,00)) ){
HXLINE( 216)			return (HX_("4",34,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 216)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("JMP",2d,6a,38,00)) ){
HXLINE( 215)			return (HX_("3",33,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 215)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("JNC",ff,6a,38,00)) ){
HXLINE( 217)			return (HX_("5",35,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 217)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("JNZ",16,6b,38,00)) ){
HXLINE( 219)			return (HX_("7",37,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 219)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("JZ",d0,40,00,00)) ){
HXLINE( 218)			return (HX_("6",36,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 218)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("LIT",37,eb,39,00)) ){
HXLINE( 205)			return (HX_("14",e3,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 205)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("LOAD",26,62,78,32)) ){
HXLINE( 221)			return (HX_("9",39,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 221)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("LSL",e5,f3,39,00)) ){
HXLINE( 196)			::String _hx_tmp = (HX_("0B",12,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 196)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 196)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("LSR",eb,f3,39,00)) ){
HXLINE( 197)			::String _hx_tmp = (HX_("0C",13,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 197)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 197)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("MOV",b4,b2,3a,00)) ){
HXLINE( 195)			::String _hx_tmp = (HX_("0A",11,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 195)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 195)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("NOP",ef,74,3b,00)) ){
HXLINE( 183)			return HX_("0000",00,d4,de,1f);
HXDLIN( 183)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("NOT",f3,74,3b,00)) ){
HXLINE( 186)			::String _hx_tmp = (HX_("03",03,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 186)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 186)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("OR",23,45,00,00)) ){
HXLINE( 185)			::String _hx_tmp = (HX_("02",02,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 185)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 185)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("OUT",6e,3c,3c,00)) ){
HXLINE( 201)			::String _hx_tmp = (HX_("10",df,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 201)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 201)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("PCADD",ee,41,89,3c)) ){
HXLINE( 213)			return (HX_("19",e8,2a,00,00) + HX_("00",00,2a,00,00));
HXDLIN( 213)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("POP",71,f9,3c,00)) ){
HXLINE( 211)			return ((HX_("18",e7,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null())) + HX_("0",30,00,00,00));
HXDLIN( 211)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("PUSH",da,d9,21,35)) ){
HXLINE( 209)			return ((HX_("17",e6,2a,00,00) + HX_("0",30,00,00,00)) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 209)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("RETURN",b0,50,b0,bb)) ){
HXLINE( 192)			return (HX_("08",08,2a,00,00) + HX_("00",00,2a,00,00));
HXDLIN( 192)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("RETURNL",9c,49,96,7e)) ){
HXLINE( 193)			return (HX_("09",09,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 193)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("SETB",80,5a,11,37)) ){
HXLINE( 206)			::String _hx_tmp = (HX_("15",e4,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 206)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 206)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("STORE",c1,4b,04,02)) ){
HXLINE( 220)			return (HX_("8",38,00,00,00) + ::Byter_obj::numFormat(instr->__get(1),3));
HXDLIN( 220)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("SUB",60,45,3f,00)) ){
HXLINE( 189)			::String _hx_tmp = (HX_("06",06,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 189)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 189)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("SWAP",93,f2,1e,37)) ){
HXLINE( 190)			::String _hx_tmp = (HX_("07",07,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 190)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 190)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("XOR",7b,0b,43,00)) ){
HXLINE( 187)			::String _hx_tmp = (HX_("04",04,2a,00,00) + ::Byter_obj::numFormat(instr->__get(1),null()));
HXDLIN( 187)			return (_hx_tmp + ::Byter_obj::numFormat(instr->__get(2),null()));
HXDLIN( 187)			goto _hx_goto_7;
            		}
            		/* default */{
HXLINE( 224)			return HX_("e",65,00,00,00);
            		}
            		_hx_goto_7:;
HXLINE( 181)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Byter_obj,opcode,return )

::String Byter_obj::numFormat(::String num,::hx::Null< int >  __o_padding){
            		int padding = __o_padding.Default(0);
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_230_numFormat)
HXDLIN( 230)		::String _hx_switch_0 = num.charAt(0);
            		if (  (_hx_switch_0==HX_(".",2e,00,00,00)) ){
HXLINE( 236)			return ::StringTools_obj::hex(( (int)(::Std_obj::parseInt(num.substring(1,null()))) ),padding);
HXDLIN( 236)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 233)			return ::StringTools_obj::hex(( (int)(::Std_obj::parseInt(num)) ),padding);
HXDLIN( 233)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 239)			return ::Byter_obj::bin2hex(num.substring(1,null()));
HXDLIN( 239)			goto _hx_goto_9;
            		}
            		/* default */{
HXLINE( 241)			return HX_("",00,00,00,00);
            		}
            		_hx_goto_9:;
HXLINE( 230)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Byter_obj,numFormat,return )

::String Byter_obj::bin2hex(::String bin){
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_246_bin2hex)
HXLINE( 247)		int num = 0;
HXLINE( 249)		{
HXLINE( 249)			int _g = 0;
HXDLIN( 249)			int _g1 = bin.length;
HXDLIN( 249)			while((_g < _g1)){
HXLINE( 249)				_g = (_g + 1);
HXDLIN( 249)				int i = (_g - 1);
HXLINE( 251)				int pos = ((bin.length - i) - 1);
HXLINE( 254)				 ::Dynamic n = ::Std_obj::parseInt(bin.charAt(pos));
HXLINE( 256)				num = (num + (( (int)(n) ) * (1 << i)));
            			}
            		}
HXLINE( 259)		return ::StringTools_obj::hex(num,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Byter_obj,bin2hex,return )

::String Byter_obj::removeComment(::String text){
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_263_removeComment)
HXLINE( 264)		int commentPos = text.indexOf(HX_("//",20,29,00,00),null());
HXLINE( 266)		if ((commentPos != -1)) {
HXLINE( 268)			text = text.substring(0,commentPos);
            		}
HXLINE( 271)		text = ::StringTools_obj::replace(text,HX_("  ",00,1c,00,00),HX_(" ",20,00,00,00));
HXLINE( 273)		return text;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Byter_obj,removeComment,return )

void Byter_obj::error(::String msg,int lineNumber){
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_277_error)
HXLINE( 278)		int _hx_int = lineNumber;
HXDLIN( 278)		Float _hx_tmp;
HXDLIN( 278)		if ((_hx_int < 0)) {
HXLINE( 278)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 278)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 278)		::Sys_obj::println(((::Std_obj::string(_hx_tmp) + HX_(": ",a6,32,00,00)) + msg));
HXLINE( 279)		::Byter_obj::exitCode = -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Byter_obj,error,(void))


Byter_obj::Byter_obj()
{
}

bool Byter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bin") ) { outValue = ( bin ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { outValue = error_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inPath") ) { outValue = ( inPath ); return true; }
		if (HX_FIELD_EQ(inName,"opcode") ) { outValue = opcode_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outPath") ) { outValue = ( outPath ); return true; }
		if (HX_FIELD_EQ(inName,"bin2hex") ) { outValue = bin2hex_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"exitCode") ) { outValue = ( exitCode ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"numFormat") ) { outValue = numFormat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"argProcess") ) { outValue = argProcess_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeComment") ) { outValue = removeComment_dyn(); return true; }
	}
	return false;
}

bool Byter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bin") ) { bin=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inPath") ) { inPath=ioValue.Cast< ::String >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outPath") ) { outPath=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"exitCode") ) { exitCode=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Byter_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Byter_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Byter_obj::bin,HX_("bin",c7,b8,4a,00)},
	{::hx::fsString,(void *) &Byter_obj::inPath,HX_("inPath",2a,c4,b7,86)},
	{::hx::fsString,(void *) &Byter_obj::outPath,HX_("outPath",53,11,36,cf)},
	{::hx::fsInt,(void *) &Byter_obj::exitCode,HX_("exitCode",6b,bb,88,01)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Byter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Byter_obj::bin,"bin");
	HX_MARK_MEMBER_NAME(Byter_obj::inPath,"inPath");
	HX_MARK_MEMBER_NAME(Byter_obj::outPath,"outPath");
	HX_MARK_MEMBER_NAME(Byter_obj::exitCode,"exitCode");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Byter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Byter_obj::bin,"bin");
	HX_VISIT_MEMBER_NAME(Byter_obj::inPath,"inPath");
	HX_VISIT_MEMBER_NAME(Byter_obj::outPath,"outPath");
	HX_VISIT_MEMBER_NAME(Byter_obj::exitCode,"exitCode");
};

#endif

::hx::Class Byter_obj::__mClass;

static ::String Byter_obj_sStaticFields[] = {
	HX_("bin",c7,b8,4a,00),
	HX_("inPath",2a,c4,b7,86),
	HX_("outPath",53,11,36,cf),
	HX_("exitCode",6b,bb,88,01),
	HX_("main",39,38,56,48),
	HX_("argProcess",b9,e2,9f,8d),
	HX_("opcode",ce,b6,42,20),
	HX_("numFormat",1d,da,8f,ae),
	HX_("bin2hex",30,16,20,5e),
	HX_("removeComment",7b,d6,2a,5a),
	HX_("error",c8,cb,29,73),
	::String(null())
};

void Byter_obj::__register()
{
	Byter_obj _hx_dummy;
	Byter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Byter",4a,78,c5,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Byter_obj::__GetStatic;
	__mClass->mSetStaticField = &Byter_obj::__SetStatic;
	__mClass->mMarkFunc = Byter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Byter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Byter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Byter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Byter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Byter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Byter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_10_boot)
HXDLIN(  10)		bin = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_12_boot)
HXDLIN(  12)		inPath = HX_("code.asm",7a,1b,2b,68);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_13_boot)
HXDLIN(  13)		outPath = HX_("code.data",0b,f1,7a,bf);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f931cc00077cde40_15_boot)
HXDLIN(  15)		exitCode = 0;
            	}
}


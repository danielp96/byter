$date
	Fri Jul  3 16:42:56 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! z_flag $end
$var wire 16 " program [15:0] $end
$var wire 12 # pc_load [11:0] $end
$var wire 12 $ pc [11:0] $end
$var wire 8 % out_port_15 [7:0] $end
$var wire 8 & out_port_14 [7:0] $end
$var wire 8 ' out_port_13 [7:0] $end
$var wire 8 ( out_port_12 [7:0] $end
$var wire 8 ) out_port_11 [7:0] $end
$var wire 8 * out_port_10 [7:0] $end
$var wire 8 + out_port_09 [7:0] $end
$var wire 8 , out_port_08 [7:0] $end
$var wire 8 - out_port_07 [7:0] $end
$var wire 8 . out_port_06 [7:0] $end
$var wire 8 / out_port_05 [7:0] $end
$var wire 8 0 out_port_04 [7:0] $end
$var wire 8 1 out_port_03 [7:0] $end
$var wire 8 2 out_port_02 [7:0] $end
$var wire 8 3 out_port_01 [7:0] $end
$var wire 8 4 out_port_00 [7:0] $end
$var wire 8 5 oprnd [7:0] $end
$var wire 8 6 instr [7:0] $end
$var wire 8 7 data_bus [7:0] $end
$var wire 1 8 c_flag $end
$var wire 12 9 address [11:0] $end
$var wire 8 : B [7:0] $end
$var wire 8 ; A [7:0] $end
$var reg 1 < clk $end
$var reg 8 = in_port_00 [7:0] $end
$var reg 8 > in_port_01 [7:0] $end
$var reg 8 ? in_port_02 [7:0] $end
$var reg 8 @ in_port_03 [7:0] $end
$var reg 8 A in_port_04 [7:0] $end
$var reg 8 B in_port_05 [7:0] $end
$var reg 8 C in_port_06 [7:0] $end
$var reg 8 D in_port_07 [7:0] $end
$var reg 8 E in_port_08 [7:0] $end
$var reg 8 F in_port_09 [7:0] $end
$var reg 8 G in_port_10 [7:0] $end
$var reg 8 H in_port_11 [7:0] $end
$var reg 8 I in_port_12 [7:0] $end
$var reg 8 J in_port_13 [7:0] $end
$var reg 8 K in_port_14 [7:0] $end
$var reg 8 L in_port_15 [7:0] $end
$var reg 1 M reset $end
$scope module BYTER $end
$var wire 8 N A [7:0] $end
$var wire 8 O B [7:0] $end
$var wire 8 P _data_bus [7:0] $end
$var wire 12 Q address [11:0] $end
$var wire 1 8 c_flag $end
$var wire 1 < clk $end
$var wire 8 R data_bus [7:0] $end
$var wire 8 S in_port_00 [7:0] $end
$var wire 8 T in_port_01 [7:0] $end
$var wire 8 U in_port_02 [7:0] $end
$var wire 8 V in_port_03 [7:0] $end
$var wire 8 W in_port_04 [7:0] $end
$var wire 8 X in_port_05 [7:0] $end
$var wire 8 Y in_port_06 [7:0] $end
$var wire 8 Z in_port_07 [7:0] $end
$var wire 8 [ in_port_08 [7:0] $end
$var wire 8 \ in_port_09 [7:0] $end
$var wire 8 ] in_port_10 [7:0] $end
$var wire 8 ^ in_port_11 [7:0] $end
$var wire 8 _ in_port_12 [7:0] $end
$var wire 8 ` in_port_13 [7:0] $end
$var wire 8 a in_port_14 [7:0] $end
$var wire 8 b in_port_15 [7:0] $end
$var wire 8 c instr [7:0] $end
$var wire 8 d oprnd [7:0] $end
$var wire 12 e pc [11:0] $end
$var wire 12 f pc_load [11:0] $end
$var wire 16 g program [15:0] $end
$var wire 1 M reset $end
$var wire 1 ! z_flag $end
$var wire 1 h weStackReg $end
$var wire 1 i weStackAddr $end
$var wire 1 j weRam $end
$var wire 1 k regEn $end
$var wire 8 l regB [7:0] $end
$var wire 8 m regA [7:0] $end
$var wire 8 n out_port_15 [7:0] $end
$var wire 8 o out_port_14 [7:0] $end
$var wire 8 p out_port_13 [7:0] $end
$var wire 8 q out_port_12 [7:0] $end
$var wire 8 r out_port_11 [7:0] $end
$var wire 8 s out_port_10 [7:0] $end
$var wire 8 t out_port_09 [7:0] $end
$var wire 8 u out_port_08 [7:0] $end
$var wire 8 v out_port_07 [7:0] $end
$var wire 8 w out_port_06 [7:0] $end
$var wire 8 x out_port_05 [7:0] $end
$var wire 8 y out_port_04 [7:0] $end
$var wire 8 z out_port_03 [7:0] $end
$var wire 8 { out_port_02 [7:0] $end
$var wire 8 | out_port_01 [7:0] $end
$var wire 8 } out_port_00 [7:0] $end
$var wire 1 ~ outEnable $end
$var wire 1 !" memEn $end
$var wire 1 "" loadPC $end
$var wire 1 #" loadFlags $end
$var wire 1 $" litEn $end
$var wire 1 %" incPC $end
$var wire 1 &" inEnable $end
$var wire 1 '" eAluY $end
$var wire 1 (" eAluB $end
$var wire 1 )" csStackReg $end
$var wire 1 *" csStackAddr $end
$var wire 1 +" csRam $end
$var wire 1 ," csPCadd $end
$var wire 8 -" _rstack_data [7:0] $end
$var wire 12 ." _program_counter [11:0] $end
$var wire 16 /" _program [15:0] $end
$var wire 12 0" _pcadd_data [11:0] $end
$var wire 12 1" _pcadd [11:0] $end
$var wire 12 2" _pc_stack [11:0] $end
$var wire 12 3" _pc_load [11:0] $end
$var wire 8 4" _oprnd [7:0] $end
$var wire 8 5" _instr [7:0] $end
$var wire 8 6" _alu [7:0] $end
$var wire 12 7" _address [11:0] $end
$var wire 1 8" Z_alu $end
$var wire 1 9" Z $end
$var wire 4 :" S [3:0] $end
$var wire 1 ;" C_alu $end
$var wire 1 <" C $end
$scope module ALU $end
$var wire 8 =" B [7:0] $end
$var wire 3 >" n [2:0] $end
$var wire 1 8" Z $end
$var wire 8 ?" Y [7:0] $end
$var wire 4 @" S [3:0] $end
$var wire 1 <" C_in $end
$var wire 1 ;" C $end
$var wire 8 A" A [7:0] $end
$var reg 9 B" temp [8:0] $end
$upscope $end
$scope module ALU_DATA $end
$var wire 8 C" in [7:0] $end
$var wire 8 D" out [7:0] $end
$var wire 1 '" enable $end
$upscope $end
$scope module DEC $end
$var wire 8 E" i [7:0] $end
$var wire 1 h weStackReg $end
$var wire 1 i weStackAddr $end
$var wire 1 j weRam $end
$var wire 1 k regEn $end
$var wire 1 ~ outEnable $end
$var wire 1 !" memEn $end
$var wire 1 "" loadPC $end
$var wire 1 #" loadFlags $end
$var wire 1 $" litEn $end
$var wire 1 %" incPC $end
$var wire 1 &" inEnable $end
$var wire 1 '" eAluY $end
$var wire 1 (" eAluB $end
$var wire 1 )" csStackReg $end
$var wire 1 *" csStackAddr $end
$var wire 1 +" csRam $end
$var wire 1 ," csPCadd $end
$var wire 1 9" Z $end
$var wire 4 F" S [3:0] $end
$var wire 1 <" C $end
$var reg 21 G" out [0:20] $end
$upscope $end
$scope module F $end
$var wire 1 ;" C_in $end
$var wire 1 8" Z_in $end
$var wire 1 < clk $end
$var wire 1 #" enabled $end
$var wire 1 M reset $end
$var reg 1 <" C_out $end
$var reg 1 9" Z_out $end
$upscope $end
$scope module FETCH $end
$var wire 1 H" clk $end
$var wire 1 I" enable $end
$var wire 1 M reset $end
$var wire 16 J" in_data [15:0] $end
$var reg 16 K" out_data [15:0] $end
$upscope $end
$scope module IN_PORT $end
$var wire 4 L" addr [3:0] $end
$var wire 1 &" enable $end
$var wire 8 M" in_00 [7:0] $end
$var wire 8 N" in_01 [7:0] $end
$var wire 8 O" in_02 [7:0] $end
$var wire 8 P" in_03 [7:0] $end
$var wire 8 Q" in_04 [7:0] $end
$var wire 8 R" in_05 [7:0] $end
$var wire 8 S" in_06 [7:0] $end
$var wire 8 T" in_07 [7:0] $end
$var wire 8 U" in_08 [7:0] $end
$var wire 8 V" in_09 [7:0] $end
$var wire 8 W" in_10 [7:0] $end
$var wire 8 X" in_11 [7:0] $end
$var wire 8 Y" in_12 [7:0] $end
$var wire 8 Z" in_13 [7:0] $end
$var wire 8 [" in_14 [7:0] $end
$var wire 8 \" in_15 [7:0] $end
$var reg 8 ]" out [7:0] $end
$upscope $end
$scope module OUT_PORT $end
$var wire 4 ^" addr [3:0] $end
$var wire 1 < clk $end
$var wire 1 ~ enable $end
$var wire 8 _" in_data [7:0] $end
$var wire 8 `" out_00 [7:0] $end
$var wire 8 a" out_01 [7:0] $end
$var wire 8 b" out_02 [7:0] $end
$var wire 8 c" out_03 [7:0] $end
$var wire 8 d" out_04 [7:0] $end
$var wire 8 e" out_05 [7:0] $end
$var wire 8 f" out_06 [7:0] $end
$var wire 8 g" out_07 [7:0] $end
$var wire 8 h" out_08 [7:0] $end
$var wire 8 i" out_09 [7:0] $end
$var wire 8 j" out_10 [7:0] $end
$var wire 8 k" out_11 [7:0] $end
$var wire 8 l" out_12 [7:0] $end
$var wire 8 m" out_13 [7:0] $end
$var wire 8 n" out_14 [7:0] $end
$var wire 8 o" out_15 [7:0] $end
$var wire 1 M reset $end
$upscope $end
$scope module PC $end
$var wire 1 < clk $end
$var wire 1 %" enable $end
$var wire 1 "" load $end
$var wire 12 p" pre_load [11:0] $end
$var wire 1 M reset $end
$var reg 12 q" pc [11:0] $end
$upscope $end
$scope module PC_ADD $end
$var wire 1 ," enable $end
$var wire 12 r" pc_addr [11:0] $end
$var wire 12 s" out_addr [11:0] $end
$var wire 12 t" in_addr [11:0] $end
$upscope $end
$scope module PC_STACK $end
$var wire 1 < clk $end
$var wire 12 u" data_in [11:0] $end
$var wire 1 *" enable $end
$var wire 1 M reset $end
$var wire 1 i w_enable $end
$var wire 12 v" data_out [11:0] $end
$var reg 3 w" n [2:0] $end
$upscope $end
$scope module RAM $end
$var wire 12 x" address [11:0] $end
$var wire 8 y" data [7:0] $end
$var wire 1 +" enable $end
$var wire 1 j write_enable $end
$var reg 8 z" out_data [7:0] $end
$upscope $end
$scope module REG $end
$var wire 8 {" A [7:0] $end
$var wire 8 |" B [7:0] $end
$var wire 4 }" SA [3:0] $end
$var wire 4 ~" SB [3:0] $end
$var wire 1 < clk $end
$var wire 8 !# data [7:0] $end
$var wire 8 "# lit [7:0] $end
$var wire 1 $" litEnable $end
$var wire 1 !" memEnable $end
$var wire 1 k regEnable $end
$var wire 1 M reset $end
$var wire 12 ## pcAddData [11:0] $end
$upscope $end
$scope module REG_STACK $end
$var wire 1 < clk $end
$var wire 12 $# data_in [11:0] $end
$var wire 1 )" enable $end
$var wire 1 M reset $end
$var wire 1 h w_enable $end
$var wire 12 %# data_out [11:0] $end
$var reg 3 &# n [2:0] $end
$upscope $end
$scope module ROM $end
$var wire 12 '# addr [11:0] $end
$var wire 16 (# data [15:0] $end
$upscope $end
$scope module RSTACK_DATA $end
$var wire 1 )# enable $end
$var wire 8 *# in [7:0] $end
$var wire 8 +# out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx +#
bx *#
x)#
bx (#
bx '#
bx &#
bx %#
b0xxxxxxxx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
b11111111 P"
b10101010 O"
b1000100 N"
b10001 M"
bx L"
bx K"
bx J"
1I"
0H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
x<"
x;"
bx :"
x9"
x8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
xk
xj
xi
xh
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
b11111111 V
b10101010 U
b1000100 T
b10001 S
bx R
bx Q
bx P
bx O
bx N
0M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
b11111111 @
b10101010 ?
b1000100 >
b10001 =
1<
bx ;
bx :
bx 9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
x!
$end
#1
bz -"
bz *#
bz 7
bz R
b0zzzzzzzz $#
bz P
bz D"
bz _"
bz y"
bz +#
b0 #
b0 f
b0 3"
b0 p"
0)#
b0 ="
b0 ;
b0 N
b0 m
b0 A"
b0 {"
b0 :
b0 O
b0 l
b0 |"
bz ]"
b1 2"
b1 v"
b0 6"
b0 ?"
b0 C"
b0 !#
18"
0#"
0""
1%"
b0 :"
b0 @"
b0 F"
0+"
0j
0k
0$"
0!"
0)"
0h
0*"
0i
0~
0&"
0("
0'"
0,"
b0 }"
b0 ~"
b0 >"
b0 L"
b0 ^"
b1 u"
b0 1"
b0 s"
bx00000000 B"
b1000000000000000000 G"
b0 9
b0 Q
b0 7"
b0 x"
b0 5
b0 d
b0 4"
b0 "#
b0 6
b0 c
b0 5"
b0 E"
b0zzzzzzzz %#
0!
09"
08
0<"
b0 K"
b111 w"
b0 0"
b0 t"
b0 ##
b111 &#
b0 %
b0 n
b0 o"
b0 &
b0 o
b0 n"
b0 '
b0 p
b0 m"
b0 (
b0 q
b0 l"
b0 )
b0 r
b0 k"
b0 *
b0 s
b0 j"
b0 +
b0 t
b0 i"
b0 ,
b0 u
b0 h"
b0 -
b0 v
b0 g"
b0 .
b0 w
b0 f"
b0 /
b0 x
b0 e"
b0 0
b0 y
b0 d"
b0 1
b0 z
b0 c"
b0 2
b0 {
b0 b"
b0 3
b0 |
b0 a"
b0 4
b0 }
b0 `"
b1010000000000 "
b1010000000000 g
b1010000000000 /"
b1010000000000 J"
b1010000000000 (#
b0 $
b0 e
b0 ."
b0 q"
b0 r"
b0 '#
1M
#2
0M
#5
1k
1$"
b10000000000 #
b10000000000 f
b10000000000 3"
b10000000000 p"
b1000000110000000000 G"
b10000000000 9
b10000000000 Q
b10000000000 7"
b10000000000 x"
b10100 6
b10100 c
b10100 5"
b10100 E"
b1010000000000 K"
1H"
0<
#10
b10 2"
b10 v"
b10 u"
b1 1"
b1 s"
0H"
b1001111101110 "
b1001111101110 g
b1001111101110 /"
b1001111101110 J"
b1001111101110 (#
b1 $
b1 e
b1 ."
b1 q"
b1 r"
b1 '#
1<
#15
b11111111 6"
b11111111 ?"
b11111111 C"
b11111111 !#
1;"
08"
b111111111 B"
1#"
b1101 :"
b1101 @"
b1101 F"
0$"
b1110 }"
b1110 ~"
b110 >"
b1110 L"
b1110 ^"
b1111101110 #
b1111101110 f
b1111101110 3"
b1111101110 p"
b101110100100000000000 G"
b1111101110 9
b1111101110 Q
b1111101110 7"
b1111101110 x"
b11101110 5
b11101110 d
b11101110 4"
b11101110 "#
b10011 6
b10011 c
b10011 5"
b10011 E"
b1001111101110 K"
1H"
0<
#20
b11111110 6"
b11111110 ?"
b11111110 C"
b11111110 !#
0;"
b11 2"
b11 v"
b11111110 B"
b11111111 ="
b11 u"
b10 1"
b10 s"
0H"
18
1<"
b11111111 ;
b11111111 N
b11111111 m
b11111111 A"
b11111111 {"
b11111111 :
b11111111 O
b11111111 l
b11111111 |"
b111000000000101 "
b111000000000101 g
b111000000000101 /"
b111000000000101 J"
b111000000000101 (#
b10 $
b10 e
b10 ."
b10 q"
b10 r"
b10 '#
1<
#25
18"
b0 ="
b0 6"
b0 ?"
b0 C"
b0 !#
b0 ;
b0 N
b0 m
b0 A"
b0 {"
b0 :
b0 O
b0 l
b0 |"
b0 B"
0#"
1""
0%"
b0 :"
b0 @"
b0 F"
0k
b0 }"
b101 ~"
b101 >"
b101 L"
b0 ^"
b101 #
b101 f
b101 3"
b101 p"
b10000000000000000000 G"
b101 9
b101 Q
b101 7"
b101 x"
b101 5
b101 d
b101 4"
b101 "#
b1110000 6
b1110000 c
b1110000 5"
b1110000 E"
b111000000000101 K"
1H"
0<
#30
b110 2"
b110 v"
b110 u"
b101 1"
b101 s"
0H"
b1010011000000 "
b1010011000000 g
b1010011000000 /"
b1010011000000 J"
b1010011000000 (#
b101 $
b101 e
b101 ."
b101 q"
b101 r"
b101 '#
1<
#35
0""
1%"
1k
1$"
b1100 }"
b0 ~"
b0 >"
b0 L"
b1100 ^"
b10011000000 #
b10011000000 f
b10011000000 3"
b10011000000 p"
b1000000110000000000 G"
b10011000000 9
b10011000000 Q
b10011000000 7"
b10011000000 x"
b11000000 5
b11000000 d
b11000000 4"
b11000000 "#
b10100 6
b10100 c
b10100 5"
b10100 E"
b1010011000000 K"
1H"
0<
#40
b111 2"
b111 v"
b111 u"
b110 1"
b110 s"
0H"
b1000000001110 "
b1000000001110 g
b1000000001110 /"
b1000000001110 J"
b1000000001110 (#
b110 $
b110 e
b110 ."
b110 q"
b110 r"
b110 '#
1<
#45
b11000000 6"
b11000000 ?"
b11000000 C"
b11000000 !#
08"
b11000000 -"
b11000000 *#
b11000000 B"
b11000000 %#
b11000000 ="
b11000000 7
b11000000 R
b11000000 $#
b11000000 P
b11000000 D"
b11000000 _"
b11000000 y"
b11000000 +#
b11000000 :
b11000000 O
b11000000 l
b11000000 |"
0k
0$"
1~
1'"
b0 }"
b1110 ~"
b110 >"
b1110 L"
b0 ^"
b1110 #
b1110 f
b1110 3"
b1110 p"
b1000000000000010010 G"
b1110 9
b1110 Q
b1110 7"
b1110 x"
b1110 5
b1110 d
b1110 4"
b1110 "#
b10000 6
b10000 c
b10000 5"
b10000 E"
b1000000001110 K"
1H"
0<
#50
b1000 2"
b1000 v"
b1000 u"
b111 1"
b111 s"
0H"
b11000000 4
b11000000 }
b11000000 `"
bx "
bx g
bx /"
bx J"
bx (#
b111 $
b111 e
b111 ."
b111 q"
b111 r"
b111 '#
1<
#55
bx -"
bx *#
b0xxxxxxxx %#
bx 7
bx R
b0xxxxxxxx $#
bx P
bx D"
bx _"
bx y"
bx +#
bx 6"
bx ?"
bx C"
bx !#
x8"
b0xxxxxxxx B"
bx ="
bx ;
bx N
bx m
bx A"
bx {"
bx :
bx O
bx l
bx |"
bx }"
bx ~"
bx >"
bx L"
bx ^"
bx #
bx f
bx 3"
bx p"
bx 9
bx Q
bx 7"
bx x"
bx 5
bx d
bx 4"
bx "#
bx 6
bx c
bx 5"
bx E"
bx K"
1H"
0<
#60
b1001 2"
b1001 v"
b1001 u"
b1000 1"
b1000 s"
0H"
b1000 $
b1000 e
b1000 ."
b1000 q"
b1000 r"
b1000 '#
1<
#65
1H"
0<
#70
b1010 2"
b1010 v"
b1010 u"
b1001 1"
b1001 s"
0H"
b1001 $
b1001 e
b1001 ."
b1001 q"
b1001 r"
b1001 '#
1<
#75
1H"
0<
#80
b1011 2"
b1011 v"
b1011 u"
b1010 1"
b1010 s"
0H"
b1010 $
b1010 e
b1010 ."
b1010 q"
b1010 r"
b1010 '#
1<
#85
1H"
0<
#90
b1100 2"
b1100 v"
b1100 u"
b1011 1"
b1011 s"
0H"
b1011 $
b1011 e
b1011 ."
b1011 q"
b1011 r"
b1011 '#
1<
#95
1H"
0<
#100
b1101 2"
b1101 v"
b1101 u"
b1100 1"
b1100 s"
0H"
b1100 $
b1100 e
b1100 ."
b1100 q"
b1100 r"
b1100 '#
1<
#105
1H"
0<
#110
b1110 2"
b1110 v"
b1110 u"
b1101 1"
b1101 s"
0H"
b1101 $
b1101 e
b1101 ."
b1101 q"
b1101 r"
b1101 '#
1<
#115
1H"
0<
#120
b1111 2"
b1111 v"
b1111 u"
b1110 1"
b1110 s"
0H"
b1110 $
b1110 e
b1110 ."
b1110 q"
b1110 r"
b1110 '#
1<
#125
1H"
0<
#130
b10000 2"
b10000 v"
b10000 u"
b1111 1"
b1111 s"
0H"
b1111 $
b1111 e
b1111 ."
b1111 q"
b1111 r"
b1111 '#
1<
#135
1H"
0<
#140
b10001 2"
b10001 v"
b10001 u"
b10000 1"
b10000 s"
0H"
b10000 $
b10000 e
b10000 ."
b10000 q"
b10000 r"
b10000 '#
1<
#145
1H"
0<
#150
b10010 2"
b10010 v"
b10010 u"
b10001 1"
b10001 s"
0H"
b10001 $
b10001 e
b10001 ."
b10001 q"
b10001 r"
b10001 '#
1<
#155
1H"
0<
#160
b10011 2"
b10011 v"
b10011 u"
b10010 1"
b10010 s"
0H"
b10010 $
b10010 e
b10010 ."
b10010 q"
b10010 r"
b10010 '#
1<
#165
1H"
0<
#170
b10100 2"
b10100 v"
b10100 u"
b10011 1"
b10011 s"
0H"
b10011 $
b10011 e
b10011 ."
b10011 q"
b10011 r"
b10011 '#
1<
#175
1H"
0<
#180
b10101 2"
b10101 v"
b10101 u"
b10100 1"
b10100 s"
0H"
b10100 $
b10100 e
b10100 ."
b10100 q"
b10100 r"
b10100 '#
1<
#185
1H"
0<
#190
b10110 2"
b10110 v"
b10110 u"
b10101 1"
b10101 s"
0H"
b10101 $
b10101 e
b10101 ."
b10101 q"
b10101 r"
b10101 '#
1<
#195
1H"
0<
#200
b10111 2"
b10111 v"
b10111 u"
b10110 1"
b10110 s"
0H"
b10110 $
b10110 e
b10110 ."
b10110 q"
b10110 r"
b10110 '#
1<
#205
1H"
0<
#210
b11000 2"
b11000 v"
b11000 u"
b10111 1"
b10111 s"
0H"
b10111 $
b10111 e
b10111 ."
b10111 q"
b10111 r"
b10111 '#
1<
#215
1H"
0<
#220
b11001 2"
b11001 v"
b11001 u"
b11000 1"
b11000 s"
0H"
b11000 $
b11000 e
b11000 ."
b11000 q"
b11000 r"
b11000 '#
1<
#225
1H"
0<
#230
b11010 2"
b11010 v"
b11010 u"
b11001 1"
b11001 s"
0H"
b11001 $
b11001 e
b11001 ."
b11001 q"
b11001 r"
b11001 '#
1<
#235
1H"
0<
#240
b11011 2"
b11011 v"
b11011 u"
b11010 1"
b11010 s"
0H"
b11010 $
b11010 e
b11010 ."
b11010 q"
b11010 r"
b11010 '#
1<
#245
1H"
0<
#250
b11100 2"
b11100 v"
b11100 u"
b11011 1"
b11011 s"
0H"
b11011 $
b11011 e
b11011 ."
b11011 q"
b11011 r"
b11011 '#
1<
#255
1H"
0<
#260
b11101 2"
b11101 v"
b11101 u"
b11100 1"
b11100 s"
0H"
b11100 $
b11100 e
b11100 ."
b11100 q"
b11100 r"
b11100 '#
1<
#265
1H"
0<
#270
b11110 2"
b11110 v"
b11110 u"
b11101 1"
b11101 s"
0H"
b11101 $
b11101 e
b11101 ."
b11101 q"
b11101 r"
b11101 '#
1<
#275
1H"
0<
#280
b11111 2"
b11111 v"
b11111 u"
b11110 1"
b11110 s"
0H"
b11110 $
b11110 e
b11110 ."
b11110 q"
b11110 r"
b11110 '#
1<
#285
1H"
0<
#290
b100000 2"
b100000 v"
b100000 u"
b11111 1"
b11111 s"
0H"
b11111 $
b11111 e
b11111 ."
b11111 q"
b11111 r"
b11111 '#
1<
#295
1H"
0<
#300
b100001 2"
b100001 v"
b100001 u"
b100000 1"
b100000 s"
0H"
b100000 $
b100000 e
b100000 ."
b100000 q"
b100000 r"
b100000 '#
1<
#302
